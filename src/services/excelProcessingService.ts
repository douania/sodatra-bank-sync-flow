import * as XLSX from 'xlsx';
import { excelMappingService } from './excelMappingService';
import { ProcessingResults } from '@/types/banking';
import { databaseService } from './databaseService';

export interface ExcelProcessingOptions {
  filename: string;
  preventDuplicates?: boolean;
  forceReprocess?: boolean;
}

class ExcelProcessingService {
  async processExcelFile(
    file: File, 
    options: ExcelProcessingOptions = { filename: file.name, preventDuplicates: true }
  ): Promise<ProcessingResults> {
    console.log(`üìä === D√âBUT TRAITEMENT EXCEL: ${options.filename} ===`);
    
    try {
      const arrayBuffer = await file.arrayBuffer();
      const workbook = XLSX.read(arrayBuffer, { type: 'array' });
      
      let totalProcessed = 0;
      let duplicatesPrevented = 0;
      const results: ProcessingResults = {
        bankReports: [],
        fundPosition: null,
        collections: [],
        clientReconciliations: [],
        totalProcessed: 0,
        errors: [],
        warnings: [],
        duplicatesPrevented: 0,
        sourceFile: options.filename
      };

      // V√©rifier si le fichier a d√©j√† √©t√© trait√© (si pr√©vention activ√©e)
      if (options.preventDuplicates && !options.forceReprocess) {
        const existingImports = await this.checkExistingImports(options.filename);
        if (existingImports.length > 0) {
          console.log(`‚ö†Ô∏è Fichier d√©j√† trait√©: ${existingImports.length} lignes trouv√©es`);
          results.warnings.push(
            `Ce fichier a d√©j√† √©t√© trait√© le ${new Date(existingImports[0].excelProcessedAt || '').toLocaleString('fr-FR')}. ${existingImports.length} lignes d√©tect√©es.`
          );
          
          // Proposer les options √† l'utilisateur
          results.errors.push('DUPLICATE_FILE_DETECTED');
          return results;
        }
      }

      for (const sheetName of workbook.SheetNames) {
        console.log(`üìã Traitement feuille: ${sheetName}`);
        
        const worksheet = workbook.Sheets[sheetName];
        const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
        
        if (jsonData.length === 0) {
          console.log(`‚ö†Ô∏è Feuille vide: ${sheetName}`);
          continue;
        }

        // ‚≠ê OPTIMISATION: Filtrer les lignes vides AVANT traitement
        const validRows = this.filterValidRows(jsonData as any[][]);
        console.log(`üìä Lignes valides d√©tect√©es: ${validRows.length} sur ${jsonData.length}`);

        // Traitement sp√©cifique pour les collections
        if (sheetName.toLowerCase().includes('collection') || validRows.length > 0) {
          const processedCollections = await this.processCollectionsWithTraceability(
            validRows,
            options,
            results
          );
          
          results.collections.push(...processedCollections);
          totalProcessed += processedCollections.length;
        }
      }

      results.totalProcessed = totalProcessed;
      results.duplicatesPrevented = duplicatesPrevented;
      
      console.log(`‚úÖ === TRAITEMENT TERMIN√â ===`);
      console.log(`üìä Total trait√©: ${totalProcessed}`);
      console.log(`üö´ Doublons √©vit√©s: ${duplicatesPrevented}`);
      
      return results;
      
    } catch (error) {
      console.error('‚ùå Erreur traitement Excel:', error);
      return {
        bankReports: [],
        fundPosition: null,
        collections: [],
        clientReconciliations: [],
        totalProcessed: 0,
        errors: [error instanceof Error ? error.message : 'Erreur inconnue'],
        warnings: [],
        duplicatesPrevented: 0,
        sourceFile: options.filename
      };
    }
  }

  // ‚≠ê NOUVELLE M√âTHODE: Filtrer les lignes vides et invalides
  private filterValidRows(jsonData: any[][]): any[][] {
    const headers = jsonData[0];
    const validRows = [headers]; // Garder les headers
    
    let consecutiveEmptyRows = 0;
    const MAX_CONSECUTIVE_EMPTY = 5; // Arr√™ter apr√®s 5 lignes vides cons√©cutives
    
    for (let i = 1; i < jsonData.length; i++) {
      const row = jsonData[i];
      
      // V√©rifier si la ligne est vide ou ne contient que des valeurs nulles/undefined
      const isEmptyRow = !row || row.length === 0 || row.every(cell => 
        cell === null || 
        cell === undefined || 
        cell === '' || 
        (typeof cell === 'string' && cell.trim() === '')
      );
      
      if (isEmptyRow) {
        consecutiveEmptyRows++;
        console.log(`‚ö†Ô∏è Ligne vide d√©tect√©e: ${i + 1}, cons√©cutives: ${consecutiveEmptyRows}`);
        
        // Arr√™ter si trop de lignes vides cons√©cutives
        if (consecutiveEmptyRows >= MAX_CONSECUTIVE_EMPTY) {
          console.log(`üõë Arr√™t du traitement: ${MAX_CONSECUTIVE_EMPTY} lignes vides cons√©cutives atteintes √† la ligne ${i + 1}`);
          break;
        }
        continue;
      }
      
      // R√©initialiser le compteur si on trouve une ligne valide
      consecutiveEmptyRows = 0;
      validRows.push(row);
    }
    
    console.log(`üìä Filtrage termin√©: ${validRows.length - 1} lignes valides (headers exclus)`);
    return validRows;
  }

  // Nouvelle m√©thode qui remplace processCollectionReportExcel
  async processCollectionReportExcel(file: File): Promise<{ success: boolean; data?: any[]; errors?: string[] }> {
    try {
      const results = await this.processExcelFile(file, {
        filename: file.name,
        preventDuplicates: true
      });
      
      return {
        success: results.errors.length === 0,
        data: results.collections,
        errors: results.errors
      };
    } catch (error) {
      return {
        success: false,
        errors: [error instanceof Error ? error.message : 'Erreur inconnue']
      };
    }
  }

  private async processCollectionsWithTraceability(
    jsonData: any[][],
    options: ExcelProcessingOptions,
    results: ProcessingResults
  ) {
    const collections = [];
    const headers = jsonData[0];
    let duplicatesPrevented = 0;
    const totalRows = jsonData.length - 1; // Exclure les headers

    console.log(`üìã Traitement de ${totalRows} lignes de collections avec tra√ßabilit√©`);

    for (let rowIndex = 1; rowIndex < jsonData.length; rowIndex++) {
      const row = jsonData[rowIndex];
      const excelSourceRow = rowIndex + 1; // +1 car Excel commence √† 1, pas 0
      
      // ‚≠ê PROGRESSION GRANULAIRE: Mettre √† jour tous les 10 lignes
      if (rowIndex % 10 === 0) {
        const progressPercent = Math.floor((rowIndex / totalRows) * 100);
        console.log(`üìä Progression traitement: ${progressPercent}% (${rowIndex}/${totalRows})`);
      }
      
      try {
        // V√©rifier si cette ligne sp√©cifique a d√©j√† √©t√© trait√©e
        if (options.preventDuplicates && !options.forceReprocess) {
          const existingRow = await this.checkSpecificRowExists(options.filename, excelSourceRow);
          if (existingRow) {
            console.log(`üö´ Ligne ${excelSourceRow} d√©j√† trait√©e, ignor√©e`);
            duplicatesPrevented++;
            results.warnings.push(`Ligne ${excelSourceRow} ignor√©e (d√©j√† trait√©e le ${new Date(existingRow.excelProcessedAt || '').toLocaleString('fr-FR')})`);
            continue;
          }
        }

        // Convertir le tableau en objet avec les headers comme cl√©s
        const rowObject: any = {};
        headers.forEach((header: string, index: number) => {
          rowObject[header] = row[index];
        });

        // Traiter la ligne normalement en utilisant la m√©thode correcte
        const collection = excelMappingService.transformExcelRowToSupabase(rowObject, excelSourceRow);
        
        if (collection) {
          // Ajouter les m√©tadonn√©es de tra√ßabilit√©
          collection.excelSourceRow = excelSourceRow;
          collection.excelFilename = options.filename;
          collection.excelProcessedAt = new Date().toISOString();
          
          collections.push(collection);
          console.log(`‚úÖ Ligne ${excelSourceRow}: ${collection.clientCode} - ${collection.collectionAmount} FCFA`);
        }
      } catch (error) {
        console.error(`‚ùå Erreur ligne ${excelSourceRow}:`, error);
        results.errors.push(`Ligne ${excelSourceRow}: ${error instanceof Error ? error.message : 'Erreur inconnue'}`);
      }
    }

    results.duplicatesPrevented = (results.duplicatesPrevented || 0) + duplicatesPrevented;
    console.log(`üö´ ${duplicatesPrevented} doublons √©vit√©s sur cette feuille`);
    
    return collections;
  }

  private async checkExistingImports(filename: string) {
    try {
      const collections = await databaseService.getCollectionsByFilename(filename);
      return collections;
    } catch (error) {
      console.error('‚ùå Erreur v√©rification imports existants:', error);
      return [];
    }
  }

  private async checkSpecificRowExists(filename: string, sourceRow: number) {
    try {
      const collection = await databaseService.getCollectionByFileAndRow(filename, sourceRow);
      return collection;
    } catch (error) {
      console.error('‚ùå Erreur v√©rification ligne sp√©cifique:', error);
      return null;
    }
  }

  async getFileImportHistory(filename: string) {
    try {
      const collections = await databaseService.getCollectionsByFilename(filename);
      
      return {
        filename,
        totalRows: collections.length,
        firstImport: collections.length > 0 ? collections[0].excelProcessedAt : null,
        lastImport: collections.length > 0 ? collections[collections.length - 1].excelProcessedAt : null,
        sourceRows: collections.map(c => c.excelSourceRow).filter(Boolean)
      };
    } catch (error) {
      console.error('‚ùå Erreur historique import:', error);
      return null;
    }
  }
}

export const excelProcessingService = new ExcelProcessingService();
